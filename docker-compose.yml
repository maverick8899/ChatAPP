version: '3.8'
services:
    #@ nodejs
    backend:
        container_name: nodejs
        image: maverick0809/chatapp-backend
        # build:
        #     context: ./backend
        #     dockerfile: Dockerfile
        restart: unless-stopped
        ports:
            - '8080:8080'
        # volumes:
        # - ./backend/:/home/node/app #? :ro , allow dev in container but restart per editting turn
        # - node_modules:/home/node/app/node_modules #? sharing
        networks: #? restriction on network
            - db-network
            - cache-network
            - backend-network
        environment:
            - PORT=${PORT}
            - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
            - REDIS_PWD=${REDIS_PWD}
            - NODE_ENV=${NODE_ENV}
            - URI_MONGODB_CHATAPP=${URI_MONGODB_CHATAPP}
            - ACCESS_TOKEN=${ACCESS_TOKEN}
            - REFRESH_TOKEN=${REFRESH_TOKEN}
            - KEY_SECRET_COOKIE=${KEY_SECRET_COOKIE}
            - KEY_PUBLIC=${KEY_PUBLIC}
            - EMAIL_CLIENT_ID=${EMAIL_CLIENT_ID}
            - EMAIL_CLIENT_SECRET=${EMAIL_CLIENT_SECRET}
            - EMAIL_REDIRECT_URI=${EMAIL_REDIRECT_URI}
            - EMAIL_REFRESH_TOKEN=${EMAIL_REFRESH_TOKEN}
        healthcheck:
            test: wget --quiet --tries=1 --spider http://localhost:${PORT} || exit 1z
            interval: 30s
            timeout: 10s
            retries: 5
        depends_on:
            - cache
            - db
        # stdin_open: true
        # tty: true
    #@ reactjs
    frontend:
        # build:
        #     context: ./frontend
        #     dockerfile: Dockerfile
        image: maverick0809/chatapp-frontend
        restart: unless-stopped
        container_name: reactjs
        # environment:
        #     - NODE_ENV=development
        #     - BACKEND_HOST=backend
        #     - BACKEND_PORT=8080
        ports:
            - '3000:80'
        volumes:
            - ./frontend:/app/:ro
            - ./frontend/nginx.conf:/etc/nginx/nginx.conf
        networks: #? react chá»‰ giao tiáº¿p Ä‘áº¿n backend
            - backend-network
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost']
            interval: 200s
            timeout: 200s
            retries: 5
        depends_on:
            - backend

    #@ redis
    cache:
        image: redis:6.2-alpine
        container_name: redis
        restart: always
        #~ user: 1000:1000  relate to non-root
        # ports:
        #     - '6379:6379'
        #? only garther log level warning and error
        command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PWD}
        volumes:
            - cache:/data
        networks: #? ---------------Note here
            - cache-network
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 30s
            timeout: 10s
            retries: 5
    #@ mongo
    db:
        image: mongo:6-jammy
        container_name: mongodb
        restart: unless-stopped
        #~ user: 1000:1000  relate to non-root
        # ports:
        #     - '27017:27017'
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
            - DB_PORT=${DB_PORT}
            - DB_NAME=${DB_NAME}
            - DB_USER=${DB_USER}
            - DB_PASSWORD=${DB_PASSWORD}
        volumes:
            - dbdata:/data/db
            - .docker/db/:/docker-entrypoint-initdb.d/
            # - .docker/db/db-entrypoint.sh:/docker-entrypoint-initdb.d/db-entrypoint.sh
            # - .docker/db/ChatAPP.users.json:/docker-entrypoint-initdb.d/ChatAPP.users.json
        networks: #? ---------------Note here
            - db-network
        healthcheck: #? zalo-mongo-healthcheck
            test: echo 'db.runCommand("ping").ok' | mongosh mongodb://${DB_USER}:${DB_PASSWORD}@localhost:${DB_PORT}/?authSource=${DB_NAME} --quiet
            interval: 30s
            timeout: 10s
            retries: 5

volumes:
    node_modules:
    dbdata:
    cache:
        driver: local #? default driver is local, just show off ðŸ˜…
networks: #? --------------Note here
    cache-network:
        driver: bridge
    db-network:
        driver: bridge
    backend-network:
        driver: bridge
