const Redis = require('ioredis');
const client = new Redis({
    host: process.env.REDIS_HOST || 'localhost',
    port: process.env.REDIS_PORT || 6379,
    ...(process.env.REDIS_PWD && { password: process.env.REDIS_PWD }),
});
process.env.REDIS_PWD && console.log('process.env.REDIS_PWD ', process.env.REDIS_PWD);

//* client.ping((err, pong) => {
//     console.log(pong.red);
// });

if (client.on('connect', () => true) && client.on('ready', (err) => true)) {
    console.log('‚ú®‚ú®‚ú® Redis ::: is ::: ready üëãüëãüëã'.green);
}

client.on('error', (err) => {
    console.log(`--> Redis ::: client ::: error: ${err}`.red);
});

module.exports = client;

//ping Redis Client s·∫Ω g·ª≠i y√™u c·∫ßu ping ƒë·∫øn Redis Server, v√† n·∫øu k·∫øt n·ªëi ƒë∆∞·ª£c duy tr√¨, Redis Server s·∫Ω tr·∫£ v·ªÅ pong. K·∫øt qu·∫£ pong ƒë∆∞·ª£c in ra m√†n h√¨nh b·ªüi l·ªánh console.log(pong).

//Khi client Redis k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Redis server, callback ƒë∆∞·ª£c ƒëƒÉng k√Ω v·ªõi 'connect' s·∫Ω ƒë∆∞·ª£c g·ªçi, callback ƒëƒÉng k√Ω v·ªõi 'error' s·∫Ω ƒë∆∞·ª£c g·ªçi n·∫øu c√≥ l·ªói x·∫£y ra, v√† callback ƒë∆∞·ª£c ƒëƒÉng k√Ω v·ªõi 'ready' s·∫Ω ƒë∆∞·ª£c g·ªçi khi client Redis ƒë√£ s·∫µn s√†ng ƒë·ªÉ th·ª±c hi·ªán c√°c truy v·∫•n Redis.

//legacyMode Khi legacyMode ƒë∆∞·ª£c b·∫≠t, client Redis s·∫Ω g·ª≠i c√°c l·ªánh Redis theo c√°ch c≈© h∆°n, ƒë∆∞·ª£c m√£ h√≥a b·∫±ng c√°ch s·ª≠ d·ª•ng m·ªôt s·ªë m√£ l·ªánh ƒë·∫∑c bi·ªát, gi√∫p t∆∞∆°ng th√≠ch v·ªõi c√°c server Redis c≈© h∆°n.(tr∆∞·ªõc 2.6)
//Trong Redis, c·ªïng m·∫∑c ƒë·ªãnh l√† 6379 v√† ƒë·ªãa ch·ªâ host m·∫∑c ƒë·ªãnh l√† 127.0.0.1
/*L·ªói "ClientClosedError: The client is closed" xu·∫•t hi·ªán khi Redis client ƒë√£ b·ªã ƒë√≥ng tr∆∞·ªõc khi g·ª≠i m·ªôt y√™u c·∫ßu Redis. ƒêi·ªÅu n√†y c√≥ th·ªÉ x·∫£y ra khi client Redis ƒë√≥ng tr∆∞·ªõc khi truy v·∫•n Redis ho√†n t·∫•t, ho·∫∑c khi c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh truy·ªÅn t·∫£i d·ªØ li·ªáu. => d√πng async await*/
